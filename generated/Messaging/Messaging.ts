// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class InboxAdded extends ethereum.Event {
  get params(): InboxAdded__Params {
    return new InboxAdded__Params(this);
  }
}

export class InboxAdded__Params {
  _event: InboxAdded;

  constructor(event: InboxAdded) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get name(): string {
    return this._event.parameters[1].value.toString();
  }

  get description(): string {
    return this._event.parameters[2].value.toString();
  }

  get condition(): InboxAddedConditionStruct {
    return changetype<InboxAddedConditionStruct>(
      this._event.parameters[3].value.toTuple()
    );
  }
}

export class InboxAddedConditionStruct extends ethereum.Tuple {
  get nftContract(): Address {
    return this[0].toAddress();
  }

  get count(): BigInt {
    return this[1].toBigInt();
  }
}

export class KeyAdded extends ethereum.Event {
  get params(): KeyAdded__Params {
    return new KeyAdded__Params(this);
  }
}

export class KeyAdded__Params {
  _event: KeyAdded;

  constructor(event: KeyAdded) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get key(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class Send extends ethereum.Event {
  get params(): Send__Params {
    return new Send__Params(this);
  }
}

export class Send__Params {
  _event: Send;

  constructor(event: Send) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get receiver(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get content(): string {
    return this._event.parameters[2].value.toString();
  }

  get inboxName(): string {
    return this._event.parameters[3].value.toString();
  }

  get encrypted(): boolean {
    return this._event.parameters[4].value.toBoolean();
  }
}

export class Messaging__inboxesResultConditionStruct extends ethereum.Tuple {
  get nftContract(): Address {
    return this[0].toAddress();
  }

  get count(): BigInt {
    return this[1].toBigInt();
  }
}

export class Messaging__inboxesResult {
  value0: string;
  value1: string;
  value2: Messaging__inboxesResultConditionStruct;
  value3: boolean;

  constructor(
    value0: string,
    value1: string,
    value2: Messaging__inboxesResultConditionStruct,
    value3: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromTuple(this.value2));
    map.set("value3", ethereum.Value.fromBoolean(this.value3));
    return map;
  }
}

export class Messaging__messagesResult {
  value0: Address;
  value1: Address;
  value2: string;
  value3: string;
  value4: boolean;

  constructor(
    value0: Address,
    value1: Address,
    value2: string,
    value3: string,
    value4: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromString(this.value3));
    map.set("value4", ethereum.Value.fromBoolean(this.value4));
    return map;
  }
}

export class Messaging extends ethereum.SmartContract {
  static bind(address: Address): Messaging {
    return new Messaging("Messaging", address);
  }

  compareStrings(a: string, b: string): boolean {
    let result = super.call(
      "compareStrings",
      "compareStrings(string,string):(bool)",
      [ethereum.Value.fromString(a), ethereum.Value.fromString(b)]
    );

    return result[0].toBoolean();
  }

  try_compareStrings(a: string, b: string): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "compareStrings",
      "compareStrings(string,string):(bool)",
      [ethereum.Value.fromString(a), ethereum.Value.fromString(b)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  inboxes(param0: Address, param1: string): Messaging__inboxesResult {
    let result = super.call(
      "inboxes",
      "inboxes(address,string):(string,string,(address,uint256),bool)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromString(param1)]
    );

    return new Messaging__inboxesResult(
      result[0].toString(),
      result[1].toString(),
      changetype<Messaging__inboxesResultConditionStruct>(result[2].toTuple()),
      result[3].toBoolean()
    );
  }

  try_inboxes(
    param0: Address,
    param1: string
  ): ethereum.CallResult<Messaging__inboxesResult> {
    let result = super.tryCall(
      "inboxes",
      "inboxes(address,string):(string,string,(address,uint256),bool)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromString(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Messaging__inboxesResult(
        value[0].toString(),
        value[1].toString(),
        changetype<Messaging__inboxesResultConditionStruct>(value[2].toTuple()),
        value[3].toBoolean()
      )
    );
  }

  messages(
    param0: Address,
    param1: Address,
    param2: BigInt
  ): Messaging__messagesResult {
    let result = super.call(
      "messages",
      "messages(address,address,uint256):(address,address,string,string,bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );

    return new Messaging__messagesResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toString(),
      result[3].toString(),
      result[4].toBoolean()
    );
  }

  try_messages(
    param0: Address,
    param1: Address,
    param2: BigInt
  ): ethereum.CallResult<Messaging__messagesResult> {
    let result = super.tryCall(
      "messages",
      "messages(address,address,uint256):(address,address,string,string,bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Messaging__messagesResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toString(),
        value[3].toString(),
        value[4].toBoolean()
      )
    );
  }

  publicKeys(param0: Address): string {
    let result = super.call("publicKeys", "publicKeys(address):(string)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toString();
  }

  try_publicKeys(param0: Address): ethereum.CallResult<string> {
    let result = super.tryCall("publicKeys", "publicKeys(address):(string)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddInboxCall extends ethereum.Call {
  get inputs(): AddInboxCall__Inputs {
    return new AddInboxCall__Inputs(this);
  }

  get outputs(): AddInboxCall__Outputs {
    return new AddInboxCall__Outputs(this);
  }
}

export class AddInboxCall__Inputs {
  _call: AddInboxCall;

  constructor(call: AddInboxCall) {
    this._call = call;
  }

  get name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get description(): string {
    return this._call.inputValues[1].value.toString();
  }

  get condition(): AddInboxCallConditionStruct {
    return changetype<AddInboxCallConditionStruct>(
      this._call.inputValues[2].value.toTuple()
    );
  }
}

export class AddInboxCall__Outputs {
  _call: AddInboxCall;

  constructor(call: AddInboxCall) {
    this._call = call;
  }
}

export class AddInboxCallConditionStruct extends ethereum.Tuple {
  get nftContract(): Address {
    return this[0].toAddress();
  }

  get count(): BigInt {
    return this[1].toBigInt();
  }
}

export class AddPublicKeyCall extends ethereum.Call {
  get inputs(): AddPublicKeyCall__Inputs {
    return new AddPublicKeyCall__Inputs(this);
  }

  get outputs(): AddPublicKeyCall__Outputs {
    return new AddPublicKeyCall__Outputs(this);
  }
}

export class AddPublicKeyCall__Inputs {
  _call: AddPublicKeyCall;

  constructor(call: AddPublicKeyCall) {
    this._call = call;
  }

  get publicKey(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class AddPublicKeyCall__Outputs {
  _call: AddPublicKeyCall;

  constructor(call: AddPublicKeyCall) {
    this._call = call;
  }
}

export class SendCall extends ethereum.Call {
  get inputs(): SendCall__Inputs {
    return new SendCall__Inputs(this);
  }

  get outputs(): SendCall__Outputs {
    return new SendCall__Outputs(this);
  }
}

export class SendCall__Inputs {
  _call: SendCall;

  constructor(call: SendCall) {
    this._call = call;
  }

  get receiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get content(): string {
    return this._call.inputValues[1].value.toString();
  }

  get inboxName(): string {
    return this._call.inputValues[2].value.toString();
  }

  get encrypted(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }
}

export class SendCall__Outputs {
  _call: SendCall;

  constructor(call: SendCall) {
    this._call = call;
  }
}
